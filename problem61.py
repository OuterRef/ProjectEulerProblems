# <p>Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:</p>
# <table><tr><td>Triangle</td>
# <td> </td>
# <td>$P_{3,n}=n(n+1)/2$</td>
# <td> </td>
# <td>$1, 3, 6, 10, 15, \dots$</td>
# </tr><tr><td>Square</td>
# <td> </td>
# <td>$P_{4,n}=n^2$</td>
# <td> </td>
# <td>$1, 4, 9, 16, 25, \dots$</td>
# </tr><tr><td>Pentagonal</td>
# <td> </td>
# <td>$P_{5,n}=n(3n-1)/2$</td>
# <td> </td>
# <td>$1, 5, 12, 22, 35, \dots$</td>
# </tr><tr><td>Hexagonal</td>
# <td> </td>
# <td>$P_{6,n}=n(2n-1)$</td>
# <td> </td>
# <td>$1, 6, 15, 28, 45, \dots$</td>
# </tr><tr><td>Heptagonal</td>
# <td> </td>
# <td>$P_{7,n}=n(5n-3)/2$</td>
# <td> </td>
# <td>$1, 7, 18, 34, 55, \dots$</td>
# </tr><tr><td>Octagonal</td>
# <td> </td>
# <td>$P_{8,n}=n(3n-2)$</td>
# <td> </td>
# <td>$1, 8, 21, 40, 65, \dots$</td>
# </tr></table><p>The ordered set of three $4$-digit numbers: $8128$, $2882$, $8281$, has three interesting properties.</p>
# <ol><li>The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).</li>
# <li>Each polygonal type: triangle ($P_{3,127}=8128$), square ($P_{4,91}=8281$), and pentagonal ($P_{5,44}=2882$), is represented by a different number in the set.</li>
# <li>This is the only set of $4$-digit numbers with this property.</li>
# </ol><p>Find the sum of the only ordered set of six cyclic $4$-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.</p>

from typing import List, Dict
import time

def P(rank, n):
    if   rank == 3: return int(n * (n + 1) / 2)
    elif rank == 4: return int(n * n)
    elif rank == 5: return int(n * (3 * n - 1) / 2)
    elif rank == 6: return int(n * (2 * n - 1))
    elif rank == 7: return int(n * (5 * n - 3) / 2)
    elif rank == 8: return int(n * (3 * n - 2))
    else: raise ValueError(f"Invalid rank: {rank}")

def getHead(n):
    return n // 100

def getTail(n):
    return n % 100

def findLoop(candidates: Dict[int, List[int]], loop: List[int], used_rank: List[int]):
    if len(used_rank) == 6:
        return getTail(loop[-1]) == getHead(loop[0])
    for rank, num_list in candidates.items():
        if rank in used_rank: continue
        for idx, n in enumerate(num_list):
            if getTail(loop[-1]) == getHead(n):
                if findLoop(candidates, loop + [n], used_rank + [rank]):
                    print(n, rank, idx)
                    return True
    return False


if __name__ == "__main__":
    # nums = [9314, 1425, 1425, 2593, 2593, 9314]
    # loop = [nums.pop()]
    # print(loopCheck(nums, loop, True))
    start = time.time()
    n_range = [[45, 140], [32, 99], [26, 81], [23, 70], [21, 63], [19, 58]]  # [start, end]
    candidates: Dict[int, List[int]] = {}
    for rank in range(6):
        candidates[rank + 3] = []
        for i in range(n_range[rank][0], n_range[rank][1] + 1):
            candidates[rank + 3].append(P(rank + 3, i))
    for i in candidates[3]:
        if findLoop(candidates, [i], [3]):
            print(i, 3, candidates[3].index(i))
    end = time.time()
    print(end - start)
