# <p>Consider all integer combinations of $a^b$ for $2 \le a \le 5$ and $2 \le b \le 5$:</p>
# \begin{matrix}
# 2^2=4, &amp;2^3=8, &amp;2^4=16, &amp;2^5=32\\
# 3^2=9, &amp;3^3=27, &amp;3^4=81, &amp;3^5=243\\
# 4^2=16, &amp;4^3=64, &amp;4^4=256, &amp;4^5=1024\\
# 5^2=25, &amp;5^3=125, &amp;5^4=625, &amp;5^5=3125
# \end{matrix}
# <p>If they are then placed in numerical order, with any repeats removed, we get the following sequence of $15$ distinct terms:
# $$4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125.$$</p>
# <p>How many distinct terms are in the sequence generated by $a^b$ for $2 \le a \le 100$ and $2 \le b \le 100$?</p>

# from math import sqrt

# leave_out = [4, 8, 16, 32, 64, 
#              9, 27, 81,
#              25, 36, 49, 100]

# def divisors(num):
#     divisor_list_l = []
#     divisor_list_r = []
#     for i in range(2, int(sqrt(num)) + 1):
#         if num % i == 0:
#             divisor_list_l.append(i)
#             if num / i != i:
#                 divisor_list_r.insert(0, num // i)
#     return divisor_list_l + divisor_list_r  # increasing order

# count = 0
# debug = []
# for a in range(2, 11):
#     if not a in leave_out:
#         for b in range(2, 10001):
#             min_c = False
#             bd_list = divisors(b)
#             for bd in bd_list:
#                 if pow(a, bd) <= 100 and b // bd <= 100:
#                     if b > 100: min_c = True
#                     count += 1
#                     debug.append(pow(a, bd))
#                 else:
#                     break
#             if min_c: count -= 1
# print(99*99 - count)
# from collections import Counter
# print(Counter(debug))

s = set()
for a in range(2, 101):
    for b in range(2, 101):
        s.add(pow(a, b))
print(len(s))
