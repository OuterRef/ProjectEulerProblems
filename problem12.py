# <p>The sequence of triangle numbers is generated by adding the natural numbers. So the $7$<sup>th</sup> triangle number would be $1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$. The first ten terms would be:
# $$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \dots$$</p>
# <p>Let us list the factors of the first seven triangle numbers:</p>
# \begin{align}
# \mathbf 1 &amp;\colon 1\\
# \mathbf 3 &amp;\colon 1,3\\
# \mathbf 6 &amp;\colon 1,2,3,6\\
# \mathbf{10} &amp;\colon 1,2,5,10\\
# \mathbf{15} &amp;\colon 1,3,5,15\\
# \mathbf{21} &amp;\colon 1,3,7,21\\
# \mathbf{28} &amp;\colon 1,2,4,7,14,28
# \end{align}
# <p>We can see that $28$ is the first triangle number to have over five divisors.</p>
# <p>What is the value of the first triangle number to have over five hundred divisors?</p>

from math import sqrt
import time

def count_split_num(num):
    count = 0
    for i in range(1, int(sqrt(num))+1):
        if num % i == 0:
            count += 1
    if int(sqrt(num)) == sqrt(num):
        return count * 2 - 1
    else:
        return count * 2

start = time.time()
n = 4
while count_split_num((1+n)*n/2) <= 500:
    n += 1
end = time.time()
print(n*(1+n)/2)
print(end-start)


# 分解质因数：n=p^a * q^b * r^c..., 则结果为(1+a)(1+b)(1+c)...
# def divide_prime(n):
#     ans = 1
#     for i in range(2, int(sqrt(n))+1):
#         if n % 1 == 0:
#             k = 0
#             while n % i == 0:
#                 n /= i
#                 k += 1
#             ans *= k + 1
#     if (n > 1): 
#         ans *= 2
#     return ans

# start = time.time()
# n = 4
# while divide_prime((1+n)*n/2) <= 500:
#     n += 1
# end = time.time()
# print(n*(1+n)/2)
# print(end-start)
